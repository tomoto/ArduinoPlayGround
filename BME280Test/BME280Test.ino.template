#include <Adafruit_BME280.h>
#include <WiFiApp.h>
#include "Adafruit_MQTT.h"
#include "Adafruit_MQTT_Client.h"

using namespace tomoto;

WiFiApp app("TempReporter");

#define AIO_SERVER      "io.adafruit.com"
#define AIO_SERVERPORT  1883                   // use 8883 for SSL
#define AIO_USERNAME    "<user adafruit.io username here>"
#define AIO_KEY         "<user adafruit.io key here>"

WiFiClient client;
Adafruit_MQTT_Client mqtt(&client, AIO_SERVER, AIO_SERVERPORT, AIO_USERNAME, AIO_KEY);
Adafruit_MQTT_Publish feedForTemp = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/temp");
Adafruit_MQTT_Publish feedForHumidity = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/humidity");
Adafruit_MQTT_Publish feedForPressure = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/pressure");

#define SEALEVELPRESSURE_HPA (1013.25)

Adafruit_BME280 bme;

void setup() {
  app.init();
  app.begin("tempreporter", "TempReporterWiFi", "hotorcold", IPAddress(192, 168, 102, 1));
  app.beginWS();

  Serial.println(F("BME280 test"));

  Wire.begin(12, 14);

  if (!bme.begin(0x76)) {
    Serial.println("Could not find a valid BME280 sensor, check wiring!");
    while (1);
  }
}

// Function to connect and reconnect as necessary to the MQTT server.
// Should be called in the loop function and it will take care if connecting.
void MQTT_connect() {
  int8_t ret;

  // Stop if already connected.
  if (mqtt.connected()) {
    return;
  }

  Serial.print("Connecting to MQTT... ");

  uint8_t retries = 3;
  while ((ret = mqtt.connect()) != 0) { // connect will return 0 for connected
       Serial.println(mqtt.connectErrorString(ret));
       Serial.println("Retrying MQTT connection in 5 seconds...");
       mqtt.disconnect();
       delay(5000);  // wait 5 seconds
       retries--;
       if (retries == 0) {
         // basically die and wait for WDT to reset me
         while (1);
       }
  }
  Serial.println("MQTT Connected!");
}

void loop() {
  MQTT_connect();

  Serial.print("Temperature = ");
  Serial.print(bme.readTemperature());
  Serial.println(" *C");

  Serial.print("Pressure = ");

  Serial.print(bme.readPressure() / 100.0F);
  Serial.println(" hPa");

  Serial.print("Approx. Altitude = ");
  Serial.print(bme.readAltitude(SEALEVELPRESSURE_HPA));
  Serial.println(" m");

  Serial.print("Humidity = ");
  Serial.print(bme.readHumidity());
  Serial.println(" %");

  Serial.println();

  feedForTemp.publish(bme.readTemperature());
  feedForHumidity.publish(bme.readHumidity());
  feedForPressure.publish(bme.readPressure() / 100.0);

  const unsigned long interval = 1000L * 15L * 60L;
  app.goToDeepSleep(interval, NULL);
  
  for (int i = 0; i < 100; i++) {
    app.loop();
    delay(100);
  }
}
